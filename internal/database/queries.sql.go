// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (user_id, filename, file_path, encrypted_key, file_size, mime_type, checksum)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, filename, file_path, encrypted_key, file_size, mime_type, checksum, created_at, updated_at
`

type CreateDocumentParams struct {
	UserID       pgtype.UUID
	Filename     string
	FilePath     string
	EncryptedKey string
	FileSize     int64
	MimeType     string
	Checksum     string
}

// Documents
func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.UserID,
		arg.Filename,
		arg.FilePath,
		arg.EncryptedKey,
		arg.FileSize,
		arg.MimeType,
		arg.Checksum,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.FilePath,
		&i.EncryptedKey,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token, expires_at, ip_address, user_agent)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, token, expires_at, created_at, ip_address, user_agent
`

type CreateSessionParams struct {
	UserID    pgtype.UUID
	Token     string
	ExpiresAt pgtype.Timestamptz
	IpAddress *netip.Addr
	UserAgent pgtype.Text
}

// Sessions
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const createShare = `-- name: CreateShare :one
INSERT INTO shares (document_id, share_token, expires_at, max_access, password_hash, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, document_id, share_token, expires_at, max_access, access_count, password_hash, created_at, created_by
`

type CreateShareParams struct {
	DocumentID   pgtype.UUID
	ShareToken   string
	ExpiresAt    pgtype.Timestamptz
	MaxAccess    pgtype.Int4
	PasswordHash pgtype.Text
	CreatedBy    pgtype.UUID
}

// Shares
func (q *Queries) CreateShare(ctx context.Context, arg CreateShareParams) (Share, error) {
	row := q.db.QueryRow(ctx, createShare,
		arg.DocumentID,
		arg.ShareToken,
		arg.ExpiresAt,
		arg.MaxAccess,
		arg.PasswordHash,
		arg.CreatedBy,
	)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.DocumentID,
		&i.ShareToken,
		&i.ExpiresAt,
		&i.MaxAccess,
		&i.AccessCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, full_name)
VALUES ($1, $2, $3)
RETURNING id, email, password_hash, full_name, created_at, updated_at, is_active
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
	FullName     string
}

// Users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents WHERE id = $1 AND user_id = $2
`

type DeleteDocumentParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteDocument(ctx context.Context, arg DeleteDocumentParams) error {
	_, err := q.db.Exec(ctx, deleteDocument, arg.ID, arg.UserID)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteExpiredShares = `-- name: DeleteExpiredShares :exec
DELETE FROM shares WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredShares(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredShares)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT id, user_id, filename, file_path, encrypted_key, file_size, mime_type, checksum, created_at, updated_at FROM documents WHERE id = $1
`

func (q *Queries) GetDocumentByID(ctx context.Context, id pgtype.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocumentByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.FilePath,
		&i.EncryptedKey,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, expires_at, created_at, ip_address, user_agent FROM sessions WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getShareByToken = `-- name: GetShareByToken :one
SELECT s.id, s.document_id, s.share_token, s.expires_at, s.max_access, s.access_count, s.password_hash, s.created_at, s.created_by, d.filename, d.mime_type, d.file_size, d.file_path
FROM shares s
JOIN documents d ON s.document_id = d.id
WHERE s.share_token = $1
`

type GetShareByTokenRow struct {
	ID           pgtype.UUID
	DocumentID   pgtype.UUID
	ShareToken   string
	ExpiresAt    pgtype.Timestamptz
	MaxAccess    pgtype.Int4
	AccessCount  pgtype.Int4
	PasswordHash pgtype.Text
	CreatedAt    pgtype.Timestamptz
	CreatedBy    pgtype.UUID
	Filename     string
	MimeType     string
	FileSize     int64
	FilePath     string
}

func (q *Queries) GetShareByToken(ctx context.Context, shareToken string) (GetShareByTokenRow, error) {
	row := q.db.QueryRow(ctx, getShareByToken, shareToken)
	var i GetShareByTokenRow
	err := row.Scan(
		&i.ID,
		&i.DocumentID,
		&i.ShareToken,
		&i.ExpiresAt,
		&i.MaxAccess,
		&i.AccessCount,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Filename,
		&i.MimeType,
		&i.FileSize,
		&i.FilePath,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, full_name, created_at, updated_at, is_active FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, full_name, created_at, updated_at, is_active FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const listDocumentsByUser = `-- name: ListDocumentsByUser :many
SELECT id, user_id, filename, file_path, encrypted_key, file_size, mime_type, checksum, created_at, updated_at FROM documents WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListDocumentsByUser(ctx context.Context, userID pgtype.UUID) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocumentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Filename,
			&i.FilePath,
			&i.EncryptedKey,
			&i.FileSize,
			&i.MimeType,
			&i.Checksum,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShareAccess = `-- name: UpdateShareAccess :exec
UPDATE shares
SET access_count = access_count + 1
WHERE id = $1 AND (max_access = -1 OR access_count < max_access)
`

func (q *Queries) UpdateShareAccess(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateShareAccess, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password_hash, full_name, created_at, updated_at, is_active
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	FullName string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
